--- /mnt/dt/Users/Derrick/Documents/GitHub/fitpress/fitpress-oauth2-client.php
+++ PHP_CodeSniffer
@@ -1,227 +1,227 @@
-<?php
-
-class FitBit_API_Client {
-	const SITE_ROOT = 'https://www.fitbit.com';
-	const API_ROOT = 'https://api.fitbit.com';
-	private $auth_token = '';
-
-	public function __construct( $auth_token ) {
-		$this->auth_token = $auth_token;
-	}
-
-	public function get_current_user_info() {
-		return $this->get( '/1/user/-/profile.json' )->user;
-	}
-
-	public function get_heart_rate($date) {
-		return $this->get( "/1/user/-/activities/heart/date/".urlencode($date)."/1d.json" )->{'activities-heart'}[0];
-	}
-
-	public function get_time_series($series_type, $end_date, $range) {
-		return $this->get( "/1/user/-/activities/".urlencode($series_type)."/date/".urlencode($end_date)."/".urlencode($range).".json")->{"activities-$series_type"};
-	}
-
-	public function post($endpoint, $fields = array()) {		
-		$url = self::API_ROOT.$endpoint;
-
-		$request = curl_init( $url );
-		
-		curl_setopt_array( $request, array(
-			CURLOPT_RETURNTRANSFER => true,
-			CURLOPT_HTTPHEADER => array('Authorization: Bearer '.$this->auth_token),
-			CURLOPT_POST => true,
-			CURLOPT_POSTFIELDS => http_build_query($fields)
-		) );
-
-		$response = curl_exec( $request );
-		$return = json_decode( $response );
-		if ( ! $return ) {
-			$return = (object) array();
-		}
-		$return->http_response_code = curl_getinfo( $request, CURLINFO_HTTP_CODE );
-		return $return;
-	}
-
-	/**
-	 * @param string $endpoint, e.g. "/me"
-	 * @param array $query, e.g. array('fields' => 'ID,title')
-	 */
-	public function get( $endpoint, $query = null ) {
-
-		$query = ( is_array( $query ) ) ? http_build_query( $query ) : $query; 
-
-		$url = self::API_ROOT.$endpoint;
-
-		if ( $query ) {
-			$url = $url.'?'.$query;
-		}
-
-		$request = curl_init( $url );
-		
-		curl_setopt_array( $request, array(
-			CURLOPT_RETURNTRANSFER => true,
-			CURLOPT_HTTPHEADER => array('authorization: Bearer '.$this->auth_token)
-		) );
-
-		$response = curl_exec( $request );
-		$return = json_decode( $response );
-		if ( ! $return ) {
-			$return = (object) array();
-		}
-		$return->http_response_code = curl_getinfo( $request, CURLINFO_HTTP_CODE );
-		return $return;
-	}
-}
-
-class FitBit_OAuth2_Client {
-	const AUTHORIZATION_URL = FitBit_API_Client::SITE_ROOT.'/oauth2/authorize';
-	const TOKEN_URL = FitBit_API_Client::API_ROOT.'/oauth2/token';
-
-	const EMPTY_CODE = 1;
-	const EMPTY_STATE = 2;
-	const INVALID_STATE = 4;
-	const DEFAULT_TIME_WINDOW = 21600; //3600 * 6
-	const OAUTH_SCOPES = ['activity', 'heartrate', 'location', 'profile', 'settings', 'sleep', 'social', 'weight'];
-
-	private $id = '';
-	private $secret = '';
-	private $redirect_uri = '';
-	private $state_key = '';
-	private $time_window_length = 0;
-
-	/**
-	 * @var int Time in seconds to wait for HTTP response for token request
-	 */
-	public $http_timeout = 6;
-
-	/**
-	 * @param string $client_id
-	 * @param string $client_secret
-	 * @param string $client_redirect_uri
-	 * @param string $state_key A secret (not shared with anyone) used to encode the session state
-	 * @param    int $time_window_length About how long the session state is valid for in seconds.
-	 *                                   That is, the time interval users have between clicking
-	 *                                   the "Connect to FitBit" button and coming back to our site.
-	 */
-	public function __construct( $client_id, $client_secret, $client_redirect_uri, $state_key, $time_window_length = self::DEFAULT_TIME_WINDOW ) {
-		$this->id = $client_id;
-		$this->secret = $client_secret;
-		$this->redirect_uri = $client_redirect_uri;
-		$this->state_key = $state_key;
-		$this->time_window_length = $time_window_length;
-	}
-
-	/**
-	 * @param string $user_id Some unique identifier for the user or session.
-	 * @return string
-	 */
-	public function encode_state( $user_id ) {
-		return $this->generate_state( $user_id );
-	}
-
-	/**
-	 * @param string $user_id Some unique identifier for the user or session.
-	 * @return string FitBit Authorization URL
-	 */
-	public function generate_authorization_url( $user_id ) {
-		$query = http_build_query( array(
-			'response_type' => 'code',
-			'client_id' => $this->id,
-			'state' => $this->generate_state( $user_id ),
-			'redirect_uri' => $this->redirect_uri,
-			'scope' => join( ' ', self::OAUTH_SCOPES )
-		) );
-
-		return sprintf(
-			'%s?%s',
-			self::AUTHORIZATION_URL,
-			$query
-		);
-	}
-
-	/**
-	 * @param string $user_id Some unique identifier for the user or session.
-	 * @throws Exception if the expected GET parameters are missing or if the encoded session state is invalid.
-	 * @return object
-	 */
-	public function process_authorization_grant_request( $user_id ) {
-		$request = $this->get_request();
-
-		if ( empty( $request['code'] ) ) {
-			throw new Exception( 'Missing Authorization Code', self::EMPTY_CODE );
-		}
-
-		if ( empty( $request['state'] ) ) {
-			throw new Exception( 'Missing Authorization State', self::EMPTY_STATE );
-		}
-
-		if ( ! $this->verify_state( $user_id, $request['state'] ) ) {
-			throw new Exception( 'Incorrect Authorization State', self::INVALID_STATE );
-		}
-
-		$token_response = $this->get_access_token( $request['code'] );
-
-		if ( $token_response->http_response_code != 200 ) {
-			return new WP_Error( $token_response->errors[0]->errorType, $token_response->errors[0]->message );
-		} else {
-			return $token_response;
-		}
-	}
-
-	private function generate_state( $user_id, $time_window_offset = 0 ) {
-		return hash_hmac(
-			'md5',
-			sprintf(
-				'%s|%d',
-				$user_id,
-				floor( time() / $this->time_window_length ) - $time_window_offset
-			),
-			$this->state_key
-		);
-	}
-
-	private function verify_state( $user_id, $state ) {
-		$verified = 0;
-		$verified |= (int) hash_equals( $state, $this->generate_state( $user_id ) );
-		$verified |= (int) hash_equals( $state, $this->generate_state( $user_id, 1 ) );
-		return (bool) $verified;
-	}
-
-	private function get_request() {
-		// If this is running inside WordPress, we need to unslash $_GET
-		if ( function_exists( 'wp_unslash' ) ) {
-			return wp_unslash( $_GET );
-		}
-
-		return $_GET;
-	}
-
-	private function get_access_token( $authorization_code ) {
-		$request = curl_init( self::TOKEN_URL );
-		curl_setopt_array( $request, array(
-			CURLOPT_POST => true,
-			CURLOPT_RETURNTRANSFER => true,
-			CURLOPT_TIMEOUT => $this->http_timeout,
-			CURLOPT_HTTPHEADER => array('Authorization: Basic '.base64_encode("$this->id:$this->secret")),
-			CURLOPT_POSTFIELDS => http_build_query( array(
-				'client_id' => $this->id,
-				'client_secret' => $this->secret,
-				'redirect_uri' => $this->redirect_uri,
-				'code' => $authorization_code,
-				'grant_type' => 'authorization_code',
-			) ),
-		) );
-
-		if ( defined( 'CURLOPT_SAFE_UPLOAD' ) ) {
-			curl_setopt( $request, CURLOPT_SAFE_UPLOAD, true );
-		}
-
-		$response = curl_exec( $request );
-		$return = json_decode( $response );
-		if ( ! $return ) {
-			$return = (object) array();
-		}
-		$return->http_response_code = curl_getinfo( $request, CURLINFO_HTTP_CODE );
-		return $return;
-	}
-}+<?php
+
+class FitBit_API_Client {
+	const SITE_ROOT = 'https://www.fitbit.com';
+	const API_ROOT = 'https://api.fitbit.com';
+	private $auth_token = '';
+
+	public function __construct( $auth_token ) {
+		$this->auth_token = $auth_token;
+	}
+
+	public function get_current_user_info() {
+		return $this->get( '/1/user/-/profile.json' )->user;
+	}
+
+	public function get_heart_rate( $date ) {
+		return $this->get( '/1/user/-/activities/heart/date/' . urlencode( $date ) . '/1d.json' )->{'activities-heart'}[0];
+	}
+
+	public function get_time_series( $series_type, $end_date, $range ) {
+		return $this->get( '/1/user/-/activities/' . urlencode( $series_type ) . '/date/' . urlencode( $end_date ) . '/' . urlencode( $range ) . '.json' )->{"activities-$series_type"};
+	}
+
+	public function post( $endpoint, $fields = array() ) {
+		$url = self::API_ROOT . $endpoint;
+
+		$request = curl_init( $url );
+
+		curl_setopt_array( $request, array(
+			CURLOPT_RETURNTRANSFER => true,
+			CURLOPT_HTTPHEADER => array( 'Authorization: Bearer ' . $this->auth_token ),
+			CURLOPT_POST => true,
+			CURLOPT_POSTFIELDS => http_build_query( $fields ),
+		) );
+
+		$response = curl_exec( $request );
+		$return = json_decode( $response );
+		if ( ! $return ) {
+			$return = (object) array();
+		}
+		$return->http_response_code = curl_getinfo( $request, CURLINFO_HTTP_CODE );
+		return $return;
+	}
+
+	/**
+	 * @param string $endpoint, e.g. "/me"
+	 * @param array $query, e.g. array('fields' => 'ID,title')
+	 */
+	public function get( $endpoint, $query = null ) {
+
+		$query = ( is_array( $query ) ) ? http_build_query( $query ) : $query;
+
+		$url = self::API_ROOT . $endpoint;
+
+		if ( $query ) {
+			$url = $url . '?' . $query;
+		}
+
+		$request = curl_init( $url );
+
+		curl_setopt_array( $request, array(
+			CURLOPT_RETURNTRANSFER => true,
+			CURLOPT_HTTPHEADER => array( 'authorization: Bearer ' . $this->auth_token ),
+		) );
+
+		$response = curl_exec( $request );
+		$return = json_decode( $response );
+		if ( ! $return ) {
+			$return = (object) array();
+		}
+		$return->http_response_code = curl_getinfo( $request, CURLINFO_HTTP_CODE );
+		return $return;
+	}
+}
+
+class FitBit_OAuth2_Client {
+	const AUTHORIZATION_URL = FitBit_API_Client::SITE_ROOT . '/oauth2/authorize';
+	const TOKEN_URL = FitBit_API_Client::API_ROOT . '/oauth2/token';
+
+	const EMPTY_CODE = 1;
+	const EMPTY_STATE = 2;
+	const INVALID_STATE = 4;
+	const DEFAULT_TIME_WINDOW = 21600; //3600 * 6
+	const OAUTH_SCOPES = [ 'activity', 'heartrate', 'location', 'profile', 'settings', 'sleep', 'social', 'weight' ];
+
+	private $id = '';
+	private $secret = '';
+	private $redirect_uri = '';
+	private $state_key = '';
+	private $time_window_length = 0;
+
+	/**
+	 * @var int Time in seconds to wait for HTTP response for token request
+	 */
+	public $http_timeout = 6;
+
+	/**
+	 * @param string $client_id
+	 * @param string $client_secret
+	 * @param string $client_redirect_uri
+	 * @param string $state_key A secret (not shared with anyone) used to encode the session state
+	 * @param    int $time_window_length About how long the session state is valid for in seconds.
+	 *                                   That is, the time interval users have between clicking
+	 *                                   the "Connect to FitBit" button and coming back to our site.
+	 */
+	public function __construct( $client_id, $client_secret, $client_redirect_uri, $state_key, $time_window_length = self::DEFAULT_TIME_WINDOW ) {
+		$this->id = $client_id;
+		$this->secret = $client_secret;
+		$this->redirect_uri = $client_redirect_uri;
+		$this->state_key = $state_key;
+		$this->time_window_length = $time_window_length;
+	}
+
+	/**
+	 * @param string $user_id Some unique identifier for the user or session.
+	 * @return string
+	 */
+	public function encode_state( $user_id ) {
+		return $this->generate_state( $user_id );
+	}
+
+	/**
+	 * @param string $user_id Some unique identifier for the user or session.
+	 * @return string FitBit Authorization URL
+	 */
+	public function generate_authorization_url( $user_id ) {
+		$query = http_build_query( array(
+			'response_type' => 'code',
+			'client_id' => $this->id,
+			'state' => $this->generate_state( $user_id ),
+			'redirect_uri' => $this->redirect_uri,
+			'scope' => join( ' ', self::OAUTH_SCOPES ),
+		) );
+
+		return sprintf(
+			'%s?%s',
+			self::AUTHORIZATION_URL,
+			$query
+		);
+	}
+
+	/**
+	 * @param string $user_id Some unique identifier for the user or session.
+	 * @throws Exception if the expected GET parameters are missing or if the encoded session state is invalid.
+	 * @return object
+	 */
+	public function process_authorization_grant_request( $user_id ) {
+		$request = $this->get_request();
+
+		if ( empty( $request['code'] ) ) {
+			throw new Exception( 'Missing Authorization Code', self::EMPTY_CODE );
+		}
+
+		if ( empty( $request['state'] ) ) {
+			throw new Exception( 'Missing Authorization State', self::EMPTY_STATE );
+		}
+
+		if ( ! $this->verify_state( $user_id, $request['state'] ) ) {
+			throw new Exception( 'Incorrect Authorization State', self::INVALID_STATE );
+		}
+
+		$token_response = $this->get_access_token( $request['code'] );
+
+		if ( $token_response->http_response_code != 200 ) {
+			return new WP_Error( $token_response->errors[0]->errorType, $token_response->errors[0]->message );
+		} else {
+			return $token_response;
+		}
+	}
+
+	private function generate_state( $user_id, $time_window_offset = 0 ) {
+		return hash_hmac(
+			'md5',
+			sprintf(
+				'%s|%d',
+				$user_id,
+				floor( time() / $this->time_window_length ) - $time_window_offset
+			),
+			$this->state_key
+		);
+	}
+
+	private function verify_state( $user_id, $state ) {
+		$verified = 0;
+		$verified |= (int) hash_equals( $state, $this->generate_state( $user_id ) );
+		$verified |= (int) hash_equals( $state, $this->generate_state( $user_id, 1 ) );
+		return (bool) $verified;
+	}
+
+	private function get_request() {
+		// If this is running inside WordPress, we need to unslash $_GET
+		if ( function_exists( 'wp_unslash' ) ) {
+			return wp_unslash( $_GET );
+		}
+
+		return $_GET;
+	}
+
+	private function get_access_token( $authorization_code ) {
+		$request = curl_init( self::TOKEN_URL );
+		curl_setopt_array( $request, array(
+			CURLOPT_POST => true,
+			CURLOPT_RETURNTRANSFER => true,
+			CURLOPT_TIMEOUT => $this->http_timeout,
+			CURLOPT_HTTPHEADER => array( 'Authorization: Basic ' . base64_encode( "$this->id:$this->secret" ) ),
+			CURLOPT_POSTFIELDS => http_build_query( array(
+				'client_id' => $this->id,
+				'client_secret' => $this->secret,
+				'redirect_uri' => $this->redirect_uri,
+				'code' => $authorization_code,
+				'grant_type' => 'authorization_code',
+			) ),
+		) );
+
+		if ( defined( 'CURLOPT_SAFE_UPLOAD' ) ) {
+			curl_setopt( $request, CURLOPT_SAFE_UPLOAD, true );
+		}
+
+		$response = curl_exec( $request );
+		$return = json_decode( $response );
+		if ( ! $return ) {
+			$return = (object) array();
+		}
+		$return->http_response_code = curl_getinfo( $request, CURLINFO_HTTP_CODE );
+		return $return;
+	}
+}
--- /mnt/dt/Users/Derrick/Documents/GitHub/fitpress/fitpress-settings.php
+++ PHP_CodeSniffer
@@ -1,46 +1,46 @@
-<div class='wrap fitpress-settings'>
-	<h2>FitPress Settings</h2>
-
-	<form method='post' action='options.php'>
-		<?php settings_fields('fitpress_settings'); ?>
-		<?php do_settings_sections('fitpress_settings'); ?>
-
-		<h3>FitPress API Credentials</h3>
-		<div class='form-padding'>
-		<table class='form-table'>
-			<tr valign='top'>
-			<th scope='row'>Client ID:</th>
-			<td>
-				<input type='text' name='fitpress_api_id' value='<?php echo get_option('fitpress_api_id'); ?>' />
-			</td>
-			</tr>
-			 
-			<tr valign='top'>
-			<th scope='row'>Client consumer Secret:</th>
-			<td>
-				<input type='text' name='fitpress_api_secret' value='<?php echo get_option('fitpress_api_secret'); ?>' />
-			</td>
-			</tr>
-
-			<tr valign='top'>
-			<th scope='row'>Debug access token:</th>
-			<td>
-				<input type='text' name='fitpress_token_override' value='<?php echo get_option('fitpress_token_override'); ?>' />
-			</td>
-			</tr>
-		</table> <!-- .form-table -->
-		<p>
-			<strong>Instructions:</strong>
-			<ol>
-				<li>Register as a FitBit Developer at <a href='https://dev.fitbit.com/' target="_blank">dev.fitbit.com</a>.</li>
-				<li>Click "Register a new app"</li>
-				<li>Enter the basic description, plus your site's homepage URL (<?php echo $blog_url; ?>).</li>
-				<li>Set your "redirect_uri" to <?php echo admin_url('admin-post.php?action=fitpress_auth_callback') ?></li>
-				<li>Set the "OAuth 2.0 Application Type" type to "Server"</li>
-				<li>Set the "Default Access Type" to "Read-Only", and save </li>
-				<li>Paste your Client OAuth2 ID/Secret provided by FitBit into the fields above, then click the Save all settings button.</li>
-			</ol>
-		</p>
-		<?php submit_button('Save all settings'); ?>
-	</form>
-</div> +<div class='wrap fitpress-settings'>
+    <h2>FitPress Settings</h2>
+
+    <form method='post' action='options.php'>
+		<?php settings_fields( 'fitpress_settings' ); ?>
+		<?php do_settings_sections( 'fitpress_settings' ); ?>
+
+        <h3>FitPress API Credentials</h3>
+        <div class='form-padding'>
+        <table class='form-table'>
+            <tr valign='top'>
+            <th scope='row'>Client ID:</th>
+            <td>
+				<input type='text' name='fitpress_api_id' value='<?php echo get_option( 'fitpress_api_id' ); ?>' />
+            </td>
+            </tr>
+             
+            <tr valign='top'>
+            <th scope='row'>Client consumer Secret:</th>
+            <td>
+				<input type='text' name='fitpress_api_secret' value='<?php echo get_option( 'fitpress_api_secret' ); ?>' />
+            </td>
+            </tr>
+
+            <tr valign='top'>
+            <th scope='row'>Debug access token:</th>
+            <td>
+				<input type='text' name='fitpress_token_override' value='<?php echo get_option( 'fitpress_token_override' ); ?>' />
+            </td>
+            </tr>
+        </table> <!-- .form-table -->
+        <p>
+            <strong>Instructions:</strong>
+            <ol>
+                <li>Register as a FitBit Developer at <a href='https://dev.fitbit.com/' target="_blank">dev.fitbit.com</a>.</li>
+                <li>Click "Register a new app"</li>
+				<li>Enter the basic description, plus your site's homepage URL (<?php echo $blog_url; ?>).</li>
+				<li>Set your "redirect_uri" to <?php echo admin_url( 'admin-post.php?action=fitpress_auth_callback' ) ?></li>
+                <li>Set the "OAuth 2.0 Application Type" type to "Server"</li>
+                <li>Set the "Default Access Type" to "Read-Only", and save </li>
+                <li>Paste your Client OAuth2 ID/Secret provided by FitBit into the fields above, then click the Save all settings button.</li>
+            </ol>
+        </p>
+		<?php submit_button( 'Save all settings' ); ?>
+    </form>
+</div> 
--- /mnt/dt/Users/Derrick/Documents/GitHub/fitpress/fitpress.css
+++ PHP_CodeSniffer
@@ -0,0 +1 @@
+
--- /mnt/dt/Users/Derrick/Documents/GitHub/fitpress/fitpress.php
+++ PHP_CodeSniffer
@@ -1,271 +1,271 @@
-<?php
-/*
-Plugin Name: FitPress
-Version: 0.2-alpha
-Description: Publish your FitBit statistics on your WordPress blog
-Author: Daniel Walmsley
-Author URI: http://danwalmsley.com
-Plugin URI: http://github.com/gravityrail/fitpress
-Text Domain: fitpress
-Domain Path: /languages
-*/
-
-define( 'FITPRESS_CLIENT_STATE_KEY', 'this is super secret' );
-
-class FitPress {
-	// singleton class pattern:
-	protected static $instance = null;
-	public static function get_instance() {
-		null === self::$instance and self::$instance = new self;
-		return self::$instance;
-	}
-
-	function __construct() {
-		// hook activation and deactivation for the plugin
-		add_action( 'init', array( $this, 'init' ) );
-	}
-
-	function init() {
-		add_action('admin_enqueue_scripts', array($this, 'fitpress_init_styles'));
-		add_action('admin_menu', array($this, 'fitpress_settings_page'));
-		add_action('admin_init', array($this, 'fitpress_register_settings'));
-		add_action('show_user_profile', array($this, 'fitpress_linked_accounts'));
-		add_action('admin_post_fitpress_auth', array($this, 'fitpress_auth'));
-		add_action('admin_post_fitpress_auth_callback', array($this, 'fitpress_auth_callback'));
-		add_action('admin_post_fitpress_auth_unlink', array($this, 'fitpress_auth_unlink'));
-		// add_shortcode( 'fitbit', array($this, 'fitpress_shortcode') );
-		add_shortcode( 'heartrate', array($this, 'fitpress_shortcode_heartrate') );
-		add_shortcode( 'steps', array($this, 'fitpress_shortcode_steps') );
-		wp_register_script( 'jsapi', 'https://www.google.com/jsapi' );
-		add_action( 'wp_enqueue_scripts', array($this, 'fitpress_scripts') );
-	}
-
-	function fitpress_scripts() {
-		wp_enqueue_script( 'jsapi' );
-	}
-
-	/**
-	 * Shortcodes
-	 **/ 
-
-	//[heartrate]
-	function fitpress_shortcode_heartrate( $atts ){
-		$atts = $this->fitpress_shortcode_base( $atts );
-
-		$fitbit = $this->get_fitbit_client();
-
-		try {
-			$result = $fitbit->get_heart_rate($atts['date']);
-			$output = '<dl>';
-			foreach ($result->value->heartRateZones as $heartRateZone) {
-				$name = $heartRateZone->name;
-				$minutes = $heartRateZone->minutes;
-				$output .= "<dt>{$name}</dt><dd>{$minutes} minutes</dd>";
-			}
-			$output .= '</dl>';
-			return $output;
-		} catch(Exception $e) {
-			return print_r($e->getMessage(), true);
-		}
-	}
-
-	//[steps]
-	function fitpress_shortcode_steps( $atts ){
-		$atts = $this->fitpress_shortcode_base( $atts );
-
-		$fitbit = $this->get_fitbit_client();
-
-		try {
-			$steps = $fitbit->get_time_series('steps', $atts['date'], '7d');
-
-			array_walk($steps, function (&$v, $k) { $v = array($v->dateTime, intval($v->value)); });
-
-			// add header
-			array_unshift($steps, array('Date', 'Steps'));
-
-			$steps_json = json_encode($steps);
-
-			$output = '';
-			$output .= <<<ENDHTML
-<script type="text/javascript">
-	google.load('visualization', '1.0', {'packages':['corechart', 'bar']});
-	google.setOnLoadCallback(function() {
-		var data = google.visualization.arrayToDataTable({$steps_json});
-		var options = {
-	        title: 'Steps per day',
-	        hAxis: {
-	          title: 'Date',
-	          format: 'Y-m-d'
-	        },
-	        vAxis: {
-	          title: 'Steps'
-	        }
-	    };
-	    var chart = new google.visualization.ColumnChart(document.getElementById('chart_div'));
-	    chart.draw(data, options);
-	});
-
-</script>
-<div id="chart_div"></div>
-ENDHTML;
-
-			// $output = print_r($steps, true);
-			return $output;
-		} catch(Exception $e) {
-			return print_r($e->getMessage(), true);
-		}
-	}
-
-	// common functionality for shortcodes
-	function fitpress_shortcode_base( $atts ) {
-		$atts = shortcode_atts( array(
-		    'date' => null
-		), $atts );
-
-		// we only compute this if not supplied because it's expensive to compute
-		if ( $atts['date'] == null ) {
-			$post = get_post(get_the_ID());
-			$atts['date'] = new DateTime($post->post_date);
-		}
-
-		return $atts;
-	}
-
-
-	/**
-	 * CSS and javascript
-	 **/
-
-	function fitpress_init_styles() {
-		wp_enqueue_style('fitpress-style', plugin_dir_url( __FILE__ ) . 'fitpress.css', array());
-	}
-
-	/**
-	 * User profile buttons
-	 **/
-
-	function fitpress_linked_accounts() {
-		$user_id = get_current_user_id();
-
-		$fitpress_credentials = get_user_meta($user_id, 'fitpress_credentials', true);
-		$last_error = get_user_meta($user_id, 'fitpress_last_error', true);
-
-		// list the wpoa_identity records:
-		echo "<div id='fitpress-linked-accounts'>";
-		echo "<h3>FitBit Account</h3>";
-		if ( ! $fitpress_credentials ) {
-			echo "<p>You have not linked your FitBit account.</p>";
-			echo $this->fitpress_login_button();
-		} else {
-			$unlink_url = admin_url('admin-post.php?action=fitpress_auth_unlink');
-			$name = $fitpress_credentials['name'];
-			echo "<p>Linked account {$name} - <a href='{$unlink_url}'>Unlink</a>";
-		}
-		if ( $last_error ) {
-			echo "<p>There was an error connecting your account: {$last_error}</p>";
-		}
-
-		echo "</div>";
-	}
-
-	private function get_fitbit_oauth2_client() {
-		require_once('fitpress-oauth2-client.php');
-		$user_id = get_current_user_id();
-		$redirect_url = admin_url('admin-post.php?action=fitpress_auth_callback');
-		return  new FitBit_OAuth2_Client(get_option('fitpress_api_id'), get_option('fitpress_api_secret'), $redirect_url, FITPRESS_CLIENT_STATE_KEY);
-	}
-
-	function get_fitbit_client( $access_token = null ) {
-		require_once('fitpress-oauth2-client.php');
-		$user_id = get_current_user_id();
-		$fitpress_credentials = get_user_meta( $user_id, 'fitpress_credentials', true );
-
-		if ( ! $access_token && $fitpress_credentials ) {
-			$access_token = $fitpress_credentials['token'];
-		}
-
-		$client = new FitBit_API_Client( $access_token );
-
-		return $client;
-	}
-
-	//redirect out to FitBit authorization URL
-	function fitpress_auth() {
-		$oauth_client = $this->get_fitbit_oauth2_client();
-		$auth_url = $oauth_client->generate_authorization_url( get_current_user_id() );
-		wp_redirect( $auth_url );
-		exit;
-	}
-
-	//delete stored fitbit token
-	function fitpress_auth_unlink() {
-		$user_id = get_current_user_id();
-		delete_user_meta( $user_id, 'fitpress_credentials' );
-		$this->redirect_to_user( $user_id );
-	}
-
-	function fitpress_auth_callback() {
-		$user_id = get_current_user_id();
-		$oauth_client = $this->get_fitbit_oauth2_client();
-		$auth_response = $oauth_client->process_authorization_grant_request( $user_id );
-		
-		if ( is_wp_error( $auth_response ) ) {
-			die(print_r( $auth_response, true ));
-		}
-
-		$access_token = $auth_response->access_token;
-		$user_info = $this->get_fitbit_client( $access_token )->get_current_user_info();
-
-		update_user_meta( get_current_user_id(), 'fitpress_credentials', array( 'token' => $access_token, 'name' => $user_info->fullName ) );
-
-		$this->redirect_to_user( $user_id );
-	}
-
-	function fitpress_login_button() {
-		$url = admin_url('admin-post.php?action=fitpress_auth');
-
-		// generates and returns a login button for FitPress:
-		$html = "";
-		$html .= "<a id='fitpress-login-fitbit' class='fitpress-login-button' href='{$url}'>";
-		$html .= "Link my FitBit account";
-		$html .= "</a>";
-		return $html;
-	}
-
-	/**
-	 * Plugin settings
-	 **/
-
-	// registers all settings that have been defined at the top of the plugin:
-	function fitpress_register_settings() {
-		register_setting('fitpress_settings', 'fitpress_api_id');
-		register_setting('fitpress_settings', 'fitpress_api_secret');
-		register_setting('fitpress_settings', 'fitpress_token_override');
-	}
-
-	// add the main settings page:
-	function fitpress_settings_page() {
-		add_options_page( 'FitPress Options', 'FitPress', 'manage_options', 'FitPress', array($this, 'fitpress_settings_page_content') );
-	}
-
-	// render the main settings page content:
-	function fitpress_settings_page_content() {
-		if ( !current_user_can( 'manage_options' ) )  {
-			wp_die( __( 'You do not have sufficient permissions to access this page.' ) );
-		}
-		$blog_url = rtrim(site_url(), "/") . "/";
-		include 'fitpress-settings.php';
-	}
-
-	/**
-	 * Private functions
-	 */
-
-	private function redirect_to_user( $user_id ) {
-		wp_redirect( get_edit_user_link( $user_id ), 301 );
-		exit;
-	}
-}
-
-FitPress::get_instance();
-?>+<?php
+/*
+Plugin Name: FitPress
+Version: 0.2-alpha
+Description: Publish your FitBit statistics on your WordPress blog
+Author: Daniel Walmsley
+Author URI: http://danwalmsley.com
+Plugin URI: http://github.com/gravityrail/fitpress
+Text Domain: fitpress
+Domain Path: /languages
+*/
+
+define( 'FITPRESS_CLIENT_STATE_KEY', 'this is super secret' );
+
+class FitPress {
+	// singleton class pattern:
+	protected static $instance = null;
+	public static function get_instance() {
+		null === self::$instance and self::$instance = new self;
+		return self::$instance;
+	}
+
+	function __construct() {
+		// hook activation and deactivation for the plugin
+		add_action( 'init', array( $this, 'init' ) );
+	}
+
+	function init() {
+		add_action( 'admin_enqueue_scripts', array( $this, 'fitpress_init_styles' ) );
+		add_action( 'admin_menu', array( $this, 'fitpress_settings_page' ) );
+		add_action( 'admin_init', array( $this, 'fitpress_register_settings' ) );
+		add_action( 'show_user_profile', array( $this, 'fitpress_linked_accounts' ) );
+		add_action( 'admin_post_fitpress_auth', array( $this, 'fitpress_auth' ) );
+		add_action( 'admin_post_fitpress_auth_callback', array( $this, 'fitpress_auth_callback' ) );
+		add_action( 'admin_post_fitpress_auth_unlink', array( $this, 'fitpress_auth_unlink' ) );
+		// add_shortcode( 'fitbit', array($this, 'fitpress_shortcode') );
+		add_shortcode( 'heartrate', array( $this, 'fitpress_shortcode_heartrate' ) );
+		add_shortcode( 'steps', array( $this, 'fitpress_shortcode_steps' ) );
+		wp_register_script( 'jsapi', 'https://www.google.com/jsapi' );
+		add_action( 'wp_enqueue_scripts', array( $this, 'fitpress_scripts' ) );
+	}
+
+	function fitpress_scripts() {
+		wp_enqueue_script( 'jsapi' );
+	}
+
+	/**
+	 * Shortcodes
+	 **/
+
+	//[heartrate]
+	function fitpress_shortcode_heartrate( $atts ) {
+		$atts = $this->fitpress_shortcode_base( $atts );
+
+		$fitbit = $this->get_fitbit_client();
+
+		try {
+			$result = $fitbit->get_heart_rate( $atts['date'] );
+			$output = '<dl>';
+			foreach ( $result->value->heartRateZones as $heartRateZone ) {
+				$name = $heartRateZone->name;
+				$minutes = $heartRateZone->minutes;
+				$output .= "<dt>{$name}</dt><dd>{$minutes} minutes</dd>";
+			}
+			$output .= '</dl>';
+			return $output;
+		} catch (Exception $e) {
+			return print_r( $e->getMessage(), true );
+		}
+	}
+
+	//[steps]
+	function fitpress_shortcode_steps( $atts ) {
+		$atts = $this->fitpress_shortcode_base( $atts );
+
+		$fitbit = $this->get_fitbit_client();
+
+		try {
+			$steps = $fitbit->get_time_series( 'steps', $atts['date'], '7d' );
+
+			array_walk( $steps, function ( &$v, $k ) { $v = array( $v->dateTime, intval( $v->value ) ); } );
+
+			// add header
+			array_unshift( $steps, array( 'Date', 'Steps' ) );
+
+			$steps_json = json_encode( $steps );
+
+			$output = '';
+			$output .= <<<ENDHTML
+<script type="text/javascript">
+    google.load('visualization', '1.0', {'packages':['corechart', 'bar']});
+    google.setOnLoadCallback(function() {
+        var data = google.visualization.arrayToDataTable({$steps_json});
+        var options = {
+            title: 'Steps per day',
+            hAxis: {
+              title: 'Date',
+              format: 'Y-m-d'
+            },
+            vAxis: {
+              title: 'Steps'
+            }
+        };
+        var chart = new google.visualization.ColumnChart(document.getElementById('chart_div'));
+        chart.draw(data, options);
+    });
+
+</script>
+<div id="chart_div"></div>
+ENDHTML;
+
+			// $output = print_r($steps, true);
+			return $output;
+		} catch (Exception $e) {
+			return print_r( $e->getMessage(), true );
+		}
+	}
+
+	// common functionality for shortcodes
+	function fitpress_shortcode_base( $atts ) {
+		$atts = shortcode_atts( array(
+		    'date' => null,
+		), $atts );
+
+		// we only compute this if not supplied because it's expensive to compute
+		if ( $atts['date'] == null ) {
+			$post = get_post( get_the_ID() );
+			$atts['date'] = new DateTime( $post->post_date );
+		}
+
+		return $atts;
+	}
+
+
+	/**
+	 * CSS and javascript
+	 **/
+
+	function fitpress_init_styles() {
+		wp_enqueue_style( 'fitpress-style', plugin_dir_url( __FILE__ ) . 'fitpress.css', array() );
+	}
+
+	/**
+	 * User profile buttons
+	 **/
+
+	function fitpress_linked_accounts() {
+		$user_id = get_current_user_id();
+
+		$fitpress_credentials = get_user_meta( $user_id, 'fitpress_credentials', true );
+		$last_error = get_user_meta( $user_id, 'fitpress_last_error', true );
+
+		// list the wpoa_identity records:
+		echo "<div id='fitpress-linked-accounts'>";
+		echo '<h3>FitBit Account</h3>';
+		if ( ! $fitpress_credentials ) {
+			echo '<p>You have not linked your FitBit account.</p>';
+			echo $this->fitpress_login_button();
+		} else {
+			$unlink_url = admin_url( 'admin-post.php?action=fitpress_auth_unlink' );
+			$name = $fitpress_credentials['name'];
+			echo "<p>Linked account {$name} - <a href='{$unlink_url}'>Unlink</a>";
+		}
+		if ( $last_error ) {
+			echo "<p>There was an error connecting your account: {$last_error}</p>";
+		}
+
+		echo '</div>';
+	}
+
+	private function get_fitbit_oauth2_client() {
+		require_once( 'fitpress-oauth2-client.php' );
+		$user_id = get_current_user_id();
+		$redirect_url = admin_url( 'admin-post.php?action=fitpress_auth_callback' );
+		return  new FitBit_OAuth2_Client( get_option( 'fitpress_api_id' ), get_option( 'fitpress_api_secret' ), $redirect_url, FITPRESS_CLIENT_STATE_KEY );
+	}
+
+	function get_fitbit_client( $access_token = null ) {
+		require_once( 'fitpress-oauth2-client.php' );
+		$user_id = get_current_user_id();
+		$fitpress_credentials = get_user_meta( $user_id, 'fitpress_credentials', true );
+
+		if ( ! $access_token && $fitpress_credentials ) {
+			$access_token = $fitpress_credentials['token'];
+		}
+
+		$client = new FitBit_API_Client( $access_token );
+
+		return $client;
+	}
+
+	//redirect out to FitBit authorization URL
+	function fitpress_auth() {
+		$oauth_client = $this->get_fitbit_oauth2_client();
+		$auth_url = $oauth_client->generate_authorization_url( get_current_user_id() );
+		wp_redirect( $auth_url );
+		exit;
+	}
+
+	//delete stored fitbit token
+	function fitpress_auth_unlink() {
+		$user_id = get_current_user_id();
+		delete_user_meta( $user_id, 'fitpress_credentials' );
+		$this->redirect_to_user( $user_id );
+	}
+
+	function fitpress_auth_callback() {
+		$user_id = get_current_user_id();
+		$oauth_client = $this->get_fitbit_oauth2_client();
+		$auth_response = $oauth_client->process_authorization_grant_request( $user_id );
+
+		if ( is_wp_error( $auth_response ) ) {
+			die( print_r( $auth_response, true ) );
+		}
+
+		$access_token = $auth_response->access_token;
+		$user_info = $this->get_fitbit_client( $access_token )->get_current_user_info();
+
+		update_user_meta( get_current_user_id(), 'fitpress_credentials', array( 'token' => $access_token, 'name' => $user_info->fullName ) );
+
+		$this->redirect_to_user( $user_id );
+	}
+
+	function fitpress_login_button() {
+		$url = admin_url( 'admin-post.php?action=fitpress_auth' );
+
+		// generates and returns a login button for FitPress:
+		$html = '';
+		$html .= "<a id='fitpress-login-fitbit' class='fitpress-login-button' href='{$url}'>";
+		$html .= 'Link my FitBit account';
+		$html .= '</a>';
+		return $html;
+	}
+
+	/**
+	 * Plugin settings
+	 **/
+
+	// registers all settings that have been defined at the top of the plugin:
+	function fitpress_register_settings() {
+		register_setting( 'fitpress_settings', 'fitpress_api_id' );
+		register_setting( 'fitpress_settings', 'fitpress_api_secret' );
+		register_setting( 'fitpress_settings', 'fitpress_token_override' );
+	}
+
+	// add the main settings page:
+	function fitpress_settings_page() {
+		add_options_page( 'FitPress Options', 'FitPress', 'manage_options', 'FitPress', array( $this, 'fitpress_settings_page_content' ) );
+	}
+
+	// render the main settings page content:
+	function fitpress_settings_page_content() {
+		if ( ! current_user_can( 'manage_options' ) ) {
+			wp_die( __( 'You do not have sufficient permissions to access this page.' ) );
+		}
+		$blog_url = rtrim( site_url(), '/' ) . '/';
+		include 'fitpress-settings.php';
+	}
+
+	/**
+	 * Private functions
+	 */
+
+	private function redirect_to_user( $user_id ) {
+		wp_redirect( get_edit_user_link( $user_id ), 301 );
+		exit;
+	}
+}
+
+FitPress::get_instance();
+?>
